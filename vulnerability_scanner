import nmap
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
import os
import json

# Configuration: This is the section which defines the target network and Port ranges. 
# If wanting to send an email notification of the scan results input them as needed. 
TARGETS = ["scanme.nmap.org"]  # Replace scanme.nmap.org with the IPs of your network devices
PORT_RANGE = "1-65535"  # Port range to scan
SCAN_REPORT_DIR = "./scan_reports"  # Directory to store scan reports
EMAIL_SENDER = "your_email@example.com"  # Replace with your email address
EMAIL_RECEIVER = "recipient@example.com"  # Replace with recipient email address
SMTP_SERVER = "smtp.example.com"  # Replace with your SMTP server
SMTP_PORT = 587
SMTP_PASSWORD = "your_email_password"  # Replace with your email password

#This section is to perform network scanning using nmap and the collection output for each target. 
def perform_scan():
    nm = nmap.PortScanner()
    scan_results = {}
    print("Starting network scan...")

    for target in TARGETS:
        print(f"Scanning {target}...")
        nm.scan(hosts=target, ports=PORT_RANGE, arguments="-sV -O")

        scan_results[target] = {
            "host_status": nm[target].state(),
            "open_ports": nm[target].all_tcp(),
            "os": nm[target]["osmatch"] if "osmatch" in nm[target] else "Unknown",
            "services": {}
        }

        for port in nm[target].all_tcp():
            service = nm[target]["tcp"][port]
            scan_results[target]["services"][port] = {
                "name": service.get("name", "Unknown"),
                "product": service.get("product", "Unknown"),
                "version": service.get("version", "Unknown"),
            }

    return scan_results

# This section is for saving the output as a JSON file. 
def save_report(scan_results):
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    if not os.path.exists(SCAN_REPORT_DIR):
        os.makedirs(SCAN_REPORT_DIR)
    report_path = os.path.join(SCAN_REPORT_DIR, f"scan_report_{timestamp}.json")

    with open(report_path, "w") as f:
        json.dump(scan_results, f, indent=4)

    print(f"Scan report saved to {report_path}")
    return report_path

# This section of the code allows an email alert with the scan output attached. 
def send_alert(report_path):
    try:
        with open(report_path, "r") as f:
            report_content = f.read()

        msg = MIMEText(report_content)
        msg["Subject"] = "Network Vulnerability Scan Report"
        msg["From"] = EMAIL_SENDER
        msg["To"] = EMAIL_RECEIVER

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_SENDER, SMTP_PASSWORD)
            server.send_message(msg)

        print(f"Alert sent to {EMAIL_RECEIVER}")
    except Exception as e:
        print(f"Failed to send email alert: {e}")

if __name__ == "__main__":
    print("Automated Network Vulnerability Scanner")
    print("====================================")

    # Perform the scan
    results = perform_scan()

    # Save the results to a file
    report_file = save_report(results)

    # Send an email alert with the scan report
    send_alert(report_file)

    print("Scan completed. Report generated and alert sent.")
